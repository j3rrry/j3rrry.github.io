<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hugo on j3rrry</title>
    <link>/tags/hugo/</link>
    <description>Recent content in hugo on j3rrry</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; {year} j3rrry</copyright>
    <lastBuildDate>Mon, 25 Feb 2019 20:25:20 +0900</lastBuildDate>
    
	    <atom:link href="/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Quickstart Hugo Academic Theme</title>
      <link>/post/quickstart-hugo-academic-theme/</link>
      <pubDate>Mon, 25 Feb 2019 20:25:20 +0900</pubDate>
      
      <guid>/post/quickstart-hugo-academic-theme/</guid>
      <description>&lt;p&gt;본 포스팅에서는 hugo-academic 테마를 이용하여 Github Page에 Publishing 하는 방법을 간단하게 다룹니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ hugo new site my-site
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd my-site
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git submodule add https://github.com/gcushen/hugo-academic.git themes/academic
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cp -r themes/academic/exampleSite/. .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# Test http://localhost:1313&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ hugo server -D &lt;span style=&#34;color:#75715e&#34;&gt;# -b &amp;#34;192.168.0.2&amp;#34; --bind=&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#75715e&#34;&gt;# github에 commit하기&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git remote add origin https://github.com/j3rrry/my-site.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;first commit&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git push origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;baseURL&lt;/code&gt;은 url을 넣어주면 된다. (Academic v4.0.0은 url 작성 시 맨 뒤에 &lt;code&gt;/&lt;/code&gt;를 추가하도록 하고 있다.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;theme&lt;/code&gt;를 지정해주지 않으면 Hugo 기본 테마가 적용된다. &lt;code&gt;themes/&lt;/code&gt; 디렉토리 안에 있는 테마 이름과 동일하게 지정해주면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Github Page에서는 세 가지 방법으로 Publishing 할 수 있습니다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
그 중에서 첫 번째 방법인 &lt;code&gt;master&lt;/code&gt; branch로 Hugo site를 Publishing 해보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;j3rrry.github.io&lt;/code&gt;를 이름으로 갖는 레포지토리 만들어 놓기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;먼저 빌드를 합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ hugo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls public/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;public/&lt;/code&gt; 디렉토리 안에 빌드된 사이트가 만들어진다. 빌드된 것을 Publishing 하는 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd public/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git remote add origin https://github.com/j3rrry/j3rrry.github.io.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;first commit&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git push origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;앞으로도 계속 새로운 포스팅을 하거나 테마를 수정한 다음에는 빌드한 후 &lt;code&gt;j3rrry.github.io&lt;/code&gt; 레포지토리에 commit을 하면 &lt;code&gt;https://j3rrry.github.io&lt;/code&gt;에 적용될 것이다.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://help.github.com/en/articles/configuring-a-publishing-source-for-github-pages&#34;&gt;https://help.github.com/en/articles/configuring-a-publishing-source-for-github-pages&lt;/a&gt;
[Netlify]: &lt;a href=&#34;https://netlify.com&#34;&gt;https://netlify.com&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Templating</title>
      <link>/post/hugo-tamplating/</link>
      <pubDate>Wed, 20 Feb 2019 06:26:19 +0000</pubDate>
      
      <guid>/post/hugo-tamplating/</guid>
      <description>&lt;p&gt;.&lt;/p&gt;
&lt;h1 id=&#34;whitespacewhitespace&#34;&gt;Whitespace&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;-&lt;/code&gt;는 whitespace를 제거해준다.&lt;/p&gt;
&lt;p&gt;without &lt;code&gt;-&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-markup&#34; data-lang=&#34;markup&#34;&gt;      &amp;lt;header class=&amp;#34;list-header&amp;#34;&amp;gt;
        {{ with .Site.Params.headerSubtext }}
        &amp;lt;p class=&amp;#34;list-header-subtext&amp;#34;&amp;gt;{{ . }}&amp;lt;/p&amp;gt;
        {{ end }}
        &amp;lt;h1 class=&amp;#34;list-header-title&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;with &lt;code&gt;-&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-markup&#34; data-lang=&#34;markup&#34;&gt;      &amp;lt;header class=&amp;#34;list-header&amp;#34;&amp;gt;
        {{- with .Site.Params.headerSubtext }}
        &amp;lt;p class=&amp;#34;list-header-subtext&amp;#34;&amp;gt;{{ . }}&amp;lt;/p&amp;gt;
        {{ end -}}
        &amp;lt;h1 class=&amp;#34;list-header-title&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;RESULT without:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-markup&#34; data-lang=&#34;markup&#34;&gt;      &amp;lt;header class=&amp;#34;list-header&amp;#34;&amp;gt;

        &amp;lt;p class=&amp;#34;list-header-subtext&amp;#34;&amp;gt;K-Shield Jr. CM 2기&amp;lt;/p&amp;gt;

        &amp;lt;h1 class=&amp;#34;list-header-title&amp;#34;&amp;gt;posts&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;RESULT with:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-markup&#34; data-lang=&#34;markup&#34;&gt;      &amp;lt;header class=&amp;#34;list-header&amp;#34;&amp;gt;
        &amp;lt;p class=&amp;#34;list-header-subtext&amp;#34;&amp;gt;K-Shield Jr. CM 2기&amp;lt;/p&amp;gt;
        &amp;lt;h1 class=&amp;#34;list-header-title&amp;#34;&amp;gt;posts&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/templates/introduction/#whitespace&#34;&gt;https://gohugo.io/templates/introduction/#whitespace&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/hugoisforlovers/</guid>
      <description>&lt;h2 id=&#34;step-1-install-hugo&#34;&gt;Step 1. Install Hugo&lt;/h2&gt;
&lt;p&gt;Go to &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo releases&lt;/a&gt; and download the
appropriate version for your OS and architecture.&lt;/p&gt;
&lt;p&gt;Save it somewhere specific as we will be using it in the next step.&lt;/p&gt;
&lt;p&gt;More complete instructions are available at &lt;a href=&#34;https://gohugo.io/getting-started/installing/&#34;&gt;Install Hugo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-2-build-the-docs&#34;&gt;Step 2. Build the Docs&lt;/h2&gt;
&lt;p&gt;Hugo has its own example site which happens to also be the documentation site
you are reading right now.&lt;/p&gt;
&lt;p&gt;Follow the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone the &lt;a href=&#34;http://github.com/spf13/hugo&#34;&gt;Hugo repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go into the repo&lt;/li&gt;
&lt;li&gt;Run hugo in server mode and build the docs&lt;/li&gt;
&lt;li&gt;Open your browser to http://localhost:1313&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Corresponding pseudo commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Press ctrl+c to stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you&amp;rsquo;ve gotten here, follow along the rest of this page on your local build.&lt;/p&gt;
&lt;h2 id=&#34;step-3-change-the-docs-site&#34;&gt;Step 3. Change the docs site&lt;/h2&gt;
&lt;p&gt;Stop the Hugo process by hitting Ctrl+C.&lt;/p&gt;
&lt;p&gt;Now we are going to run hugo again, but this time with hugo in watch mode.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&amp;gt; Press ctrl+c to stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open your &lt;a href=&#34;http://vim.spf13.com&#34;&gt;favorite editor&lt;/a&gt; and change one of the source
content pages. How about changing this very file to &lt;em&gt;fix the typo&lt;/em&gt;. How about changing this very file to &lt;em&gt;fix the typo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Content files are found in &lt;code&gt;docs/content/&lt;/code&gt;. Unless otherwise specified, files
are located at the same relative location as the url, in our case
&lt;code&gt;docs/content/overview/quickstart.md&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Change and save this file.. Notice what happened in your terminal.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Change detected, rebuilding site

&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 26 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Refresh the browser and observe that the typo is now fixed.&lt;/p&gt;
&lt;p&gt;Notice how quick that was. Try to refresh the site before it&amp;rsquo;s finished building. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.&lt;/p&gt;
&lt;h2 id=&#34;step-4-have-fun&#34;&gt;Step 4. Have fun&lt;/h2&gt;
&lt;p&gt;The best way to learn something is to play with it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
