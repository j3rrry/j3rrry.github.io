<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ssl on j3rrry</title>
    <link>https://j3rrry.netlify.com/tags/ssl/</link>
    <description>Recent content in ssl on j3rrry</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; {year} j3rrry</copyright>
    <lastBuildDate>Fri, 29 Mar 2019 19:50:20 +0900</lastBuildDate>
    
	    <atom:link href="https://j3rrry.netlify.com/tags/ssl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Easy Rev</title>
      <link>https://j3rrry.netlify.com/post/easy-rev/</link>
      <pubDate>Fri, 29 Mar 2019 19:50:20 +0900</pubDate>
      
      <guid>https://j3rrry.netlify.com/post/easy-rev/</guid>
      <description>

&lt;h1 id=&#34;easy-rev&#34;&gt;easy_rev&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Easy reversing!!!&lt;/p&gt;

&lt;p&gt;plz you would solve in ubuntu 16.04&lt;/p&gt;

&lt;p&gt;by pwnwiz&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://octf.hacklab.kr/files/f1a12e5ed7884339dd4b108272ca70eb/easy_rev.zip&#34; target=&#34;_blank&#34;&gt;easy_rev.zip&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;MD5: e3eda0a4cacd2927973bca03df2197c9&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ file easy_rev flag
easy_rev: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=d6ab8e0c86636e8331cc465ae54a5013598dd79e, not stripped
flag:     openssl enc&#39;d data with salted password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;하나는 바이너리이고 다른 하나는 암호화된 flag이다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void __cdecl main(int argc, const char **argv, const char **envp)
{
  signed int i; // [sp+8h] [bp-48h]@1
  int v6[10]; // [sp+10h] [bp-40h]@1

  puts(&amp;quot;==========================================&amp;quot;);   // banner
  puts(&amp;quot;       NEWBIE REV1 right here !!&amp;quot;);
  puts(&amp;quot;solve the magic I putted, and get the flag&amp;quot;);
  puts(&amp;quot;==========================================&amp;quot;);
  printf(&amp;quot;&amp;gt;&amp;gt; &amp;quot;);
  for ( i = 0; i &amp;lt; 10; ++i )
    scanf(&amp;quot;%d&amp;quot;, &amp;amp;v6[i]);                                // 10개의 정수 입력
  puts(&amp;quot;++++++++++++++++++++++++++++++++++++++++++&amp;quot;);
  puts(&amp;quot;Let&#39;s See the result!!!!&amp;quot;);
  puts(&amp;quot;++++++++++++++++++++++++++++++++++++++++++&amp;quot;);
  if ( swap(v6) == 10 )                                 // 성공
  {
    puts(&amp;quot;&amp;gt;&amp;gt; Yes, You got right ( IF YOU CERTAINLY INSERTED EXACTLY 10 NUMBERS )&amp;quot;);
    puts(&amp;quot;&amp;gt;&amp;gt; You just need to &#39;add&#39; all the no for every index. That sum is key for flag file !!&amp;quot;);
    puts(&amp;quot;&amp;gt;&amp;gt; (flag file is encryted aes-256-cbc of openssl)&amp;quot;);
  }
  else                                                  // 실패
  {
    puts(&amp;quot;&amp;gt;&amp;gt; Nope :&amp;lt; BETTER TRY HARDER THAN THAT&amp;quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;정확히 바이너리가 원하는 10개의 정수를 입력해야 성공이다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int __fastcall swap(int *a1)
{
  int result = 0; // [sp+18h] [bp-48h]@1
  int v4 = 3; // [sp+1Ch] [bp-44h]@1
  int i; // [sp+24h] [bp-3Ch]@1
  int j; // [sp+28h] [bp-38h]@9
  int k; // [sp+2Ch] [bp-34h]@12
  int v9[10] = {0x4f, 4, 0x24, 0x274, 0x75, 0x3e, 0x99a, 0xffffff9b, 0x29, 0xef}; // [sp+30h] [bp-30h]@1

  for ( i = 0; i &amp;lt; 10; ++i )    // a1의 인덱스i에 따라 서로 다른 값과 xor
  {
    if ( i % 3 == 1)
      v4 -= i;
    else if ( i % 3 == 2 )
      v4 += i;
    else
      v4 *= i;
    a1[i] ^= v4;
  }

  for ( j = 0; j &amp;lt; 10; ++j )    // 0xF 와 xor
    a1[j] ^= 0xF;

  for ( k = 0; k &amp;lt; 10; ++k )    // v9와 모두 같아야 함
  {
    if ( a1[k] == v9[k] )
      ++result;
  }
  return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;swap 함수는 정수형 배열 &lt;code&gt;v9&lt;/code&gt;를 만들고 두 가지 연산을 한다.



&lt;figure&gt;

&lt;img src=&#34;https://user-images.githubusercontent.com/19237789/55238845-ccfa0000-5278-11e9-986f-ca0d4e19e526.png&#34; alt=&#34;loop1.png&#34; width=&#34;60%&#34; height=&#34;60%&#34; /&gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; &gt;
  &lt;h4&gt;&amp;lt;그림1&amp;gt; loop 1&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;code&gt;a1&lt;/code&gt;의 인덱스(i)에 따라 서로 다른 값과 xor 연산하고 0xF 와 한번더 xor 연산을 한 값이 정수형 배열 &lt;code&gt;v9&lt;/code&gt;와 같아야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;64 -12 42 632 -123 53 2445 -123 63 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위의 10개의 숫자를 넣으면&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./easy_rev
==========================================
       NEWBIE REV1 right here !!
solve the magic I putted, and get the flag
==========================================
&amp;gt;&amp;gt; 64 -12 42 632 -123 53 2445 -123 63 1
++++++++++++++++++++++++++++++++++++++++++
Let&#39;s See the result!!!!
++++++++++++++++++++++++++++++++++++++++++
&amp;gt;&amp;gt; Yes, You got right ( IF YOU CERTAINLY INSERTED EXACTLY 10 NUMBERS )
&amp;gt;&amp;gt; You just need to &#39;add&#39; all the no for every index. That sum is key for flag file !!
&amp;gt;&amp;gt; (flag file is encryted aes-256-cbc of openssl)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10개의 숫자를 더한 값이 flag 파일의 key라고 알려준다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; sum([64, -12, 42, 632, -123, 53, 2445, -123, 63, 1])
3042
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;key = 3042&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openssl enc -d -aes-256-cbc -in flag -k 3042
flag{R2versing_1s_b4sed_0n_H4cking_:)}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ubuntu 16.04에서 복호화했다.&lt;br /&gt;
&lt;code&gt;flag{R2versing_1s_b4sed_0n_H4cking_:)}&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
